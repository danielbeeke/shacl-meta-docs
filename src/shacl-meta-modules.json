{"id":"1118be77-bcd0-40da-9cce-e5e9da8c8a7c","title":"SHACL Meta Modules","story":"<h1 id=\"welcome-to-shacl-meta\">Welcome to SHACL meta.</h1><p></p><blockquote>SHACL meta is a collection of TypeScript modules that do various tasks. The overarching goal is to make it super easy to work with SHACL in TypeScript, on the server and in the browser.</blockquote><h3 id=\"about-shacl\"><span data-effect-id=\"effect-1675192252256-7\" data-effect-type=\"invisible\" data-effect-subject=\"6a9428a045e11ff38bb622107fbf1b4b\">About SHACL</span></h3><p>A SHACL shape is a set of rules that define how a piece of RDF data may look. First an example of RDF data. This data shows a little bit of data of Søren Kierkegaard. It is written in the <a href=\"https://www.w3.org/TR/turtle/\">Turtle</a> RDF format.</p><h3 id=\"an-example-of-a-shacl-shape\"><span data-effect-id=\"effect-1675192412318-13\" data-effect-type=\"invisible\" data-effect-subject=\"5b64f76c74f4b9a5782512dd88d686bc\" data-effect-version=\"d967e62338f7266ea132bf9c76c16c24\" data-effect-payload=\"{&quot;codeHighlights&quot;:&quot;14, 17, 25, 32, 38, 49&quot;}\">An example of a SHACL shape</span></h3><p>A SHACL shape defines which properties are required and how many values a property may have. It may define a lot more though. Here is <a href=\"https://www.w3.org/TR/shacl/\">the specification of SHACL</a>.</p><h2 id=\"shacl-meta\"><span data-effect-id=\"effect-1675198405250-1\" data-effect-type=\"invisible\" data-effect-subject=\"e60ba5412ff841682edd440fc46e32b5\" data-effect-version=\"dce9845da20a3d6d6ea2c4e3710717d5\">SHACL meta</span></h2><p>Converts a SHACL shape to some meta information which is used by the other modules. </p><h2 id=\"shacl-meta-type\"><span data-effect-id=\"effect-1675198413092-2\" data-effect-type=\"invisible\" data-effect-subject=\"5e68fa454a5d551f9d52529e7277b5ad\" data-effect-version=\"c56d53891bf0f9e502f0508e29e6860d\">SHACL meta Type</span></h2><p>SHACL meta Type takes the SHACL shape and converts it to a TypeScript type. </p><h2 id=\"shacl-meta-sparql\"><span data-effect-id=\"effect-1675198423615-3\" data-effect-type=\"invisible\" data-effect-subject=\"76cd249d3a58459d0279fd5eec00690a\" data-effect-version=\"f923ba43127145e305ec9b6d2279d7b6\">SHACL meta SPARQL</span></h2><p>Provides a ShaclModel class which makes it easy to fetch data according to a SHACL shape. You can do pagination or fetch one or more specific objects.</p><h2 id=\"shacl-meta-eject\"><span data-effect-id=\"effect-1675198433655-4\" data-effect-type=\"invisible\" data-effect-subject=\"45430cc2c35ecc66f2ff69894880c2d5\" data-effect-version=\"796e8ff38c7712252f606ca231de5834\">SHACL meta Eject</span></h2><p>All the above modules include an awful lot of JavaScript modules which you probably do not want in the frontend. The following is what you could have instead of loading all kinds of dependencies.</p><h3 id=\"the-ejected-typescript-file\"><span data-effect-id=\"effect-1675197097983-42\" data-effect-type=\"invisible\" data-effect-subject=\"e333f58a31acdc661f1661459a2bbaa2\" data-effect-version=\"0055d47ffac350a734281618f6ccf5bd\">The ejected TypeScript file</span></h3><p>This module exports a small TypeScript file for a SHACL shape which can be included in your frontend. The model itself contains the SPARQL query template, the TypeScript type, some meta data and finally the Model that you can inport in your application.</p><h3 id=\"generation-of-these-models\"><span data-effect-id=\"effect-1675196461770-29\" data-effect-type=\"invisible\" data-effect-subject=\"3f77ea8b4a5919f1d8fab79f404329c4\" data-effect-version=\"7e30729e3c8928914646fe6a7d0be698\">Generation of these models</span></h3><p>Typically you would create a little TypeScript file that you will run with your npm &quot;predev&quot; hook. This example file is executed with <a href=\"https://deno.land/\">Deno</a>.</p><h3 id=\"packagejson\"><span data-effect-id=\"effect-1675196760374-34\" data-effect-type=\"invisible\" data-effect-subject=\"06e8af135e5e2e460c022d2fc1669473\" data-effect-version=\"39d6dfc3ee6d77117cdc5d456905d9b2\">Package.json</span></h3><p>This is what you can add to your package.json.</p>","subjectIndex":["e60ba5412ff841682edd440fc46e32b5","6a9428a045e11ff38bb622107fbf1b4b","5b64f76c74f4b9a5782512dd88d686bc","5e68fa454a5d551f9d52529e7277b5ad","76cd249d3a58459d0279fd5eec00690a","45430cc2c35ecc66f2ff69894880c2d5","e333f58a31acdc661f1661459a2bbaa2","3f77ea8b4a5919f1d8fab79f404329c4","06e8af135e5e2e460c022d2fc1669473"],"subjects":{"6a9428a045e11ff38bb622107fbf1b4b":{"created_at":1675192038070,"versions":{"d031bb67c5aba977304cc7207bde850d":{"value":"@prefix dbo: <http://dbpedia.org/ontology/> .\n@prefix dbr: <http://dbpedia.org/resource/> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\ndbr:Søren_Kierkegaard\n  dbo:birthDate \"1813-05-05\"^^xsd:date ;\n  dbo:birthPlace dbr:Denmark, dbr:Denmark–Norway, dbr:Copenhagen ;\n  dbo:thumbnail <http://commons.wikimedia.org/wiki/Special:FilePath/Søren_Kierkegaard_(1813-1855)_-_(cropped).jpg?width=300> .\n"}},"versionIndex":["d031bb67c5aba977304cc7207bde850d"],"type":"code","name":"Person.ttl","language":""},"5b64f76c74f4b9a5782512dd88d686bc":{"created_at":1675192314071,"versions":{"d967e62338f7266ea132bf9c76c16c24":{"value":"@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix sh: <http://www.w3.org/ns/shacl#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n@prefix dbp: <http://dbpedia.org/property/> .\n@prefix dbo: <http://dbpedia.org/ontology/> .\n@prefix foaf: <http://xmlns.com/foaf/0.1/> .\n@prefix shm: <https://github.com/danielbeeke/shacl-meta/> .\n@prefix self: <https://self.com/> .\n\nself:Philosopher\n    a sh:NodeShape ;\n\n    sh:targetClass dbo:Philosopher ;\n\n    sh:property [\n        sh:path rdfs:label ;\n        sh:datatype rdf:langString ; \n        sh:languageIn ( \"en\" ) ;\n        sh:minCount 1 ;\n        sh:maxCount 1 ;\n    ] ;\n\n    sh:property [\n        sh:path dbo:thumbnail ;\n        shm:alias dbp:thumbnail ;\n        sh:minCount 1 ;\n        sh:maxCount 1 ;\n    ] ;\n\n    sh:property [\n        sh:path dbo:birthPlace ;\n        sh:nodeKind sh:IRI ;\n        sh:node self:Location ;\n    ] ;\n\n    sh:property [\n        sh:path dbo:birthDate ;\n        sh:datatype xsd:date;\n        sh:maxCount 1 ;\n    ] .\n\nself:Location\n    a sh:NodeShape ;\n\n    sh:targetClass <http://dbpedia.org/ontology/Location> ;\n\n    sh:property [\n        sh:path rdfs:label ;\n        sh:datatype rdf:langString ;\n        sh:languageIn ( \"en\" ) ;\n        sh:minCount 1 ;\n        sh:maxCount 1 ;\n    ] ."}},"versionIndex":["d967e62338f7266ea132bf9c76c16c24"],"type":"code","name":"PersonShape.ttl","language":""},"5e68fa454a5d551f9d52529e7277b5ad":{"created_at":1675192535519,"versions":{"c56d53891bf0f9e502f0508e29e6860d":{"value":"export type Philosopher = {\n  label: string;\n  thumbnail: string;\n  birthPlace?: Array<Location>;\n  birthDate?: Date;\n}\n\nexport type Location = {\n  label: string;\n}\n"}},"versionIndex":["c56d53891bf0f9e502f0508e29e6860d"],"type":"code","name":"Person.ts","language":"typescript"},"e60ba5412ff841682edd440fc46e32b5":{"created_at":1675196200096,"versions":{"dce9845da20a3d6d6ea2c4e3710717d5":{"value":"{\n    \"https://self.com/Philosopher\": {\n      \"attributes\": {\n          \"targetClass\": \"http://dbpedia.org/ontology/Person\"\n      },\n      \"properties\": [\n        {\n          \"or\": [\n            {\n              \"dataType\": \"http://www.w3.org/2001/XMLSchema#string\",\n              \"max\": 1,\n              \"singular\": true,\n              \"multiple\": false    \n            },\n            {\n              \"dataType\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\",\n              \"languageIn\": [\n                \"en\",\n                \"nl\"\n              ],\n              \"min\": 1,\n              \"required\": true,\n              \"singular\": false,\n              \"multiple\": true    \n            }\n          ],\n          \"predicate\": \"http://www.w3.org/2000/01/rdf-schema#label\",\n          \"singular\": false,\n          \"multiple\": true\n        },\n        {\n          \"required\": true,\n          \"min\": 1,\n          \"max\": 1,\n          \"alias\": \"http://dbpedia.org/property/thumbnail\",\n          \"hasValue\": \"http://dbpedia.org/ontology/example\",\n          \"predicate\": \"http://dbpedia.org/ontology/thumbnail\",\n          \"singular\": true,\n          \"multiple\": false\n        },\n        {\n          \"in\": [\n            \"http://dbpedia.org/ontology/Person\",\n            \"http://xmlns.com/foaf/0.1/Person\"\n          ],\n          \"required\": true,\n          \"min\": 1,\n          \"max\": 1,\n          \"predicate\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",\n          \"singular\": true,\n          \"multiple\": false\n        },\n        {\n          \"nodeType\": \"https://self.com/Location\",\n          \"predicate\": \"http://dbpedia.org/property/birthPlace\",\n          \"nodeKind\": \"http://www.w3.org/ns/shacl#IRI\",\n          \"singular\": false,\n          \"multiple\": true\n        },\n        {\n          \"max\": 1,\n          \"dataType\": \"http://www.w3.org/2001/XMLSchema#date\",\n          \"predicate\": \"http://dbpedia.org/property/birthDate\",\n          \"singular\": true,\n          \"multiple\": false\n        }\n      ]\n    },\n    \"https://self.com/Location\": {\n      \"attributes\": {\n          \"targetClass\": \"http://dbpedia.org/ontology/Location\"\n      },\n      \"properties\": [\n        {\n          \"required\": true,\n          \"min\": 1,\n          \"max\": 1,\n          \"predicate\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",\n          \"singular\": true,\n          \"multiple\": false\n        },\n        {\n          \"required\": true,\n          \"min\": 1,\n          \"max\": 1,\n          \"alias\": \"http://www.w3.org/2000/01/rdf-schema#label\",\n          \"dataType\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\",\n          \"predicate\": \"http://xmlns.com/foaf/0.1/name\",\n          \"singular\": true,\n          \"multiple\": false\n        }\n      ]\n    }\n  }\n  "}},"versionIndex":["dce9845da20a3d6d6ea2c4e3710717d5"],"type":"code","name":"Person.meta.json","language":"json"},"76cd249d3a58459d0279fd5eec00690a":{"created_at":1675196255099,"versions":{"f923ba43127145e305ec9b6d2279d7b6":{"value":"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nCONSTRUCT {\n  ?s ?p ?o.\n  ?this <urn:shacl-meta-sparql> <urn:shacl-meta-sparql>.\n}\nWHERE {\n  ?s ?p ?o.\n  {\n    SELECT ?this WHERE { ?this rdf:type dbo:Philosopher. }\n    OFFSET 100\n    LIMIT 10\n  }\n  { BIND(?this AS ?s) }\n  UNION\n  {\n    ?this ?p ?o.\n    FILTER(?this = ?s)\n    VALUES ?p {\n      rdfs:label\n      dbo:thumbnail\n      dbo:birthPlace\n      dbp:birthDate\n    }\n    FILTER((?p != dbo:birthPlace) || (ISIRI(?o)))\n    FILTER((?p != rdfs:label) || (LANG(?o) IN(\"en\", \"nl\")))\n    FILTER((?p != rdfs:label) || ((ISLITERAL(?o)) && ((LANG(?o)) != \"\")))\n    FILTER((?p != dbp:birthDate) || ((DATATYPE(?o)) = xsd:date))\n  }\n  UNION\n  {\n    {\n      {\n        ?this dbo:birthPlace ?s.\n        VALUES ?p {\n          rdfs:label\n        }\n        FILTER((?p != rdfs:label) || (LANG(?o) IN(\"de\", \"fr\")))\n        FILTER((?p != rdfs:label) || ((ISLITERAL(?o)) && ((LANG(?o)) != \"\")))\n      }\n    }\n  }\n}\n"}},"versionIndex":["f923ba43127145e305ec9b6d2279d7b6"],"type":"code","name":"Person.sparql","language":""},"45430cc2c35ecc66f2ff69894880c2d5":{"created_at":1675196291851,"versions":{"796e8ff38c7712252f606ca231de5834":{"value":"import { model as People } from './Person.model.ts'\n\nconst soren = await People.get('http://dbpedia.org/resource/Søren_Kierkegaard', ['en'])\n\nsoren. // Has type autocompletion"}},"versionIndex":["796e8ff38c7712252f606ca231de5834"],"type":"code","name":"Person.ejected.ts","language":"typescript"},"e333f58a31acdc661f1661459a2bbaa2":{"created_at":1675196368848,"versions":{"0055d47ffac350a734281618f6ccf5bd":{"value":"\nimport { Model } from '../ShaclModel.ts'\n\nexport function createQuery (input1: string | Array<string> | number = 10, input2: number | Array<string> = 0, input3: Array<string> = []): string {\n  const iris = Array.isArray(input1) ? input1 : (typeof input1 === 'string' ? [input1] : [])\n  const limit = typeof input1 === 'number' ? input1 : 10\n  const offset = typeof input2 === 'number' ? input2 : 0\n  const langCodes: Array<string> = input3.length ? input3 : (Array.isArray(input2) ? input2 : [])\n\n  return `\n    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n    PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n    PREFIX dbo: <http://dbpedia.org/ontology/>\n    CONSTRUCT {\n      ?s ?p ?o.\n      ?this <urn:shacl-meta-sparql> <urn:shacl-meta-sparql>.\n    }\n    WHERE {\n      ?s ?p ?o.\n      {\n        SELECT ?this WHERE {\n          ?this rdf:type dbo:Philosopher.\n          ${iris.length ? `VALUES ?this { ${iris.map(iri => `<${iri}>`).join(\", \")} }` : \"\"}\n        }\n        OFFSET ${offset}\n        LIMIT ${limit}\n      }\n      { BIND(?this AS ?s) }\n      UNION\n      {\n        ?this ?p ?o.\n        FILTER(?this = ?s)\n        VALUES ?p {\n          rdfs:label\n          dbo:thumbnail\n          dbo:birthPlace\n          dbo:birthDate\n        }\n        FILTER((?p != dbo:birthPlace) || (ISIRI(?o)))\n        FILTER((?p != rdfs:label) || (LANG(?o) IN(${langCodes.map(langCode => `\"${langCode}\"`).join(\", \")})))\n        FILTER((?p != rdfs:label) || ((ISLITERAL(?o)) && ((LANG(?o)) != \"\")))\n        FILTER((?p != dbo:birthDate) || ((DATATYPE(?o)) = xsd:date))\n      }\n      UNION\n      {\n        {\n          {\n            ?this dbo:birthPlace ?s.\n            VALUES ?p {\n              rdfs:label\n            }\n            FILTER((?p != rdfs:label) || (LANG(?o) IN(${langCodes.map(langCode => `\"${langCode}\"`).join(\", \")})))\n            FILTER((?p != rdfs:label) || ((ISLITERAL(?o)) && ((LANG(?o)) != \"\")))\n          }\n        }\n      }\n    }\n  `\n}\n\nexport type selfPhilosopher = {\n  label: string;\n  thumbnail: string;\n  birthPlace?: Array<selfLocation>;\n  birthDate?: Date;\n}\n\nexport type selfLocation = {\n  label: string;\n}\n\n\nexport const prefixes = {\n  \"label\": \"rdfs:label\",\n  \"type\": \"rdf:type\"\n}\n\nexport const meta = {\n  \"selfPhilosopher\": {\n    \"label\": {\n      \"multiple\": false,\n      \"optional\": false,\n      \"type\": \"string\"\n    },\n    \"thumbnail\": {\n      \"multiple\": false,\n      \"optional\": false,\n      \"type\": \"string\"\n    },\n    \"birthPlace\": {\n      \"multiple\": true,\n      \"optional\": true,\n      \"type\": \"selfLocation\"\n    },\n    \"birthDate\": {\n      \"multiple\": false,\n      \"optional\": true,\n      \"type\": \"Date\"\n    }\n  },\n  \"selfLocation\": {\n    \"label\": {\n      \"multiple\": false,\n      \"optional\": false,\n      \"type\": \"string\"\n    }\n  }\n}\n\nexport const model = new Model<selfPhilosopher>('https://dbpedia.org/sparql', createQuery, prefixes, 'dbo', meta)"}},"versionIndex":["0055d47ffac350a734281618f6ccf5bd"],"type":"code","name":"Person.model.ts","language":"typescript"},"3f77ea8b4a5919f1d8fab79f404329c4":{"created_at":1675196441080,"versions":{"7e30729e3c8928914646fe6a7d0be698":{"value":"import { eject } from 'https://deno.land/x/shacl_meta_eject@0.5/mod.ts'\nconst personShacl = Deno.readTextFileSync('./shapes/Person.ttl')\nconst fileContents = await eject(personShacl, { 'label': 'rdfs:label', 'type': 'rdf:type' }, 'dbo', 'https://dbpedia.org/sparql', '../ShaclModel')\nDeno.writeTextFileSync('./src/Models/Person.ts', fileContents)"}},"versionIndex":["7e30729e3c8928914646fe6a7d0be698"],"type":"code","name":"generate.ts","language":"typescript"},"06e8af135e5e2e460c022d2fc1669473":{"created_at":1675196506028,"versions":{"39d6dfc3ee6d77117cdc5d456905d9b2":{"value":"{\n  \"name\": \"awesome-app\",\n  \"scripts\": {\n    \"predev\": \"deno run --allow-all --unstable generate.ts\",\n    \"dev\": \"serve\"\n  },\n}\n"}},"versionIndex":["39d6dfc3ee6d77117cdc5d456905d9b2"],"type":"code","name":"package.json","language":"json"}},"version":"0.3.1","updated_at":1666075072214}